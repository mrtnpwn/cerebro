--[[
This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org>
]]

local errors = {}

exit = os.exit

local instruction_set = {
    normal = {
        ['>'] = 'pointer = pointer + 1',
        ['<'] = 'pointer = pointer - 1',
        ['+'] = 'tape[pointer] = tape[pointer] + 1',
        ['-'] = 'tape[pointer] = tape[pointer] - 1',
        ['*'] = 'tape[pointer] = tape[pointer] * tape[pointer]',
        ['.'] = 'io.write(string.char(tape[pointer]))',
        [':'] = 'io.write(tape[pointer])',
        [','] = 'tape[pointer] = io.read(1):byte()',
        ['['] = 'while tape[pointer] ~= 0 do -- BEGINLOOP',
        [']'] = 'end -- ENDLOOP',
        ['{'] = 'tape[pointer] = function() -- BEGINFUNCTION\nlocal pointer = 0\nlocal tape = {}\nfor i = 0, 30000 do tape[i] = 0 end',
        ['}'] = 'end -- ENDFUNCTION',
        ['?'] = 'tape[pointer] = math.random(0, #tape)',
        ['@'] = 'tape[pointer]()',
        ['~'] = 'tape[pointer] = 0',
        ['#'] = 'os.exit(0)',
    },
    minify = {
        ['>'] = 'p=p+1',
        ['<'] = 'p=p-1',
        ['+'] = 't[p]=t[p]+1',
        ['-'] = 't[p]=t[p]-1',
        ['*'] = 't[p]=t[p]*t[p]',
        ['.'] = 'io.write(string.char(t[p]))',
        [':'] = 'io.write(t[p])',
        [','] = 't[p]=io.read(1):byte()',
        ['['] = 'while t[p]~=0 do -- BEGINLOOP',
        [']'] = 'end -- ENDLOOP',
        ['{'] = 't[p]=function() -- BEGINFUNCTION\nlocal p=0\nlocal t={}\nfor i=0,30000 do t[i]=0 end',
        ['}'] = 'end -- ENDFUNCTION',
        ['?'] = 't[p]=math.random(0, #t)',
        ['@'] = 't[p]()',
        ['~'] = 't[p]=0',
        ['#'] = 'os.exit(0)',
    },
    debug = {
        ['>'] = 'p=p+1',
        ['<'] = 'p=p-1',
        ['+'] = 't[p]=t[p]+1',
        ['-'] = 't[p]=t[p]-1',
        ['*'] = 't[p]=t[p]*t[p]',
        ['.'] = 'io.write(string.char(t[p]))',
        [':'] = 'io.write(t[p])',
        [','] = 't[p]=io.read(1):byte()',
        ['['] = 'while t[p]~=0 do -- BEGINLOOP',
        [']'] = 'end -- ENDLOOP',
        ['{'] = 't[p]=function() -- BEGINFUNCTION\nlocal p=0\nlocal t={}\nfor i=0,30000 do t[i]=0 end',
        ['}'] = 'end -- ENDFUNCTION',
        ['?'] = 't[p]=math.random(0, #t)',
        ['@'] = 't[p]()',
        ['~'] = 't[p]=0',
        ['#'] = 'os.exit(0)',
    }
}

--- The cerebro compiler
local function cerebro(input, mode)
    local code = {
        normal = {
            '-- Autogenerated by cerebro',
            'local pointer = 0 -- Initialize the pointer',
            'local tape = {} -- Initialize the tape',
            'for i = 0, 30000 do tape[i] = 0 end -- Fill the tape cells with zeros',
            '-- Begin instructions',
        },
        minify = {
            '-- Autogenerated by cerebro\n',
            'local p=0',
            'local t={}',
            'for i=0,30000 do t[i]=0 end',
        },
        debug = {
            'io.write=function() return 1; end',
            'io.read=function() return 1; end',
            'os.exit=function() return 1; end',
            'local p=0',
            'local t={}',
            'for i=0,30000 do t[i]=0 end',
        }
    }

    -- Get all includes

    input = input:gsub('#include "(.-)"', function(mod)
        local module = io.open(mod, 'r')

        if module then
            return module:read('*a')
        else
            local pos = input:find('#include')

            table.insert(errors, {
                position = pos,
                value = 'module ' .. mod .. ' not found'
            })

            return ''
        end
    end)

    -- Strip all comments

    input = input:gsub('/%*(.-)%*/', function()
        return ''
    end)

    -- Handle compiler directives

    input:gsub('#error "(.-)"', function(reason)
        table.insert(errors, {
            position = 1,
            value = reason
        })

        return ''
    end)

    -- Lex and parse the program

    input:gsub('%p', function(symbol)
        if instruction_set[mode][symbol] == nil then
            local pos = input:find(symbol)

            err(pos, 'unknown symbol ' .. symbol)
        end

        table.insert(code[mode], instruction_set[mode][symbol])
    end)

    return table.concat(code[mode], '\n')
end

local function test(original, compiled)
    xpcall(function()
        assert(loadstring(compiled))()
    end, function(err)
        err:gsub('%[(.-)%]:%d+: (.+)', function(luastring, reason)
            if reason == "attempt to call field '?' (a number value)" then
                local pos = original:find('@')

                table.insert(errors, {
                    position = pos,
                    value = 'attempt to call a numeric cell'
                })
            end

            if reason == "attempt to perform arithmetic on field '?' (a nil value)" then
                local pos = original:find('<')

                table.insert(errors, {
                    position = pos,
                    value = 'attempt to add/subtract from a nil cell'
                })
            end
        end)

        err:gsub('cerebro.lua:152: %[(.-)%]:%d+: (.+)', function(luastring, reason)
            reason:gsub("'<eof>' expected near 'end'", function()
                local pos = original:find('%]') or original:find('}')

                table.insert(errors, {
                    position = pos,
                    value = 'unexpected eof (probably you misstyped and ] or })'
                })
            end)

            reason:gsub("%(to close '(%a-)' at line %d%)", function(_type)
                if _type == 'function' then
                    local pos = original:find('{')

                    table.insert(errors, {
                        position = pos,
                        value = 'unfinished function (in char {)'
                    })
                end

                if _type == 'while' then
                    local pos = original:find('%[')

                    table.insert(errors, {
                        position = pos,
                        value = 'unfinished loop (in char [)'
                    })
                end
            end)
        end)
    end)
end

-- The cerebro command line tool
local function cli(args)
    -- Help screen
    local function help()
        print(
            'cerebro compiler 1.1.0\n' ..
            'usage: cerebro [option] <program> <output>\n\n' ..
            'options:\n' ..
            '  -h,--help: show this page\n' ..
            '  -b,--build: output a minified version instead\n' ..
            'learn more at https://github.com/mrtnpwn/cerebro'
        )
    end

    if not args or #args < 1 then help() return end

    local config = { output = 'minify' }

    local exec = {
        ['help'] = help,
        ['build'] = function(program, output)
            local file = io.open(program, 'r')

            local content = file:read('*a')

            if file then
                local dev = cerebro(content, 'debug')

                test(content, dev)

                if #errors > 0 then
                    print('cerebro: compile failed')

                    for k, v in pairs(errors) do
                        print(string.format('  - %s:%s: %s', program, v.position, v.value))
                    end

                    exit(1)
                else
                    if output then
                        local out = io.open(output, 'w')
                        out:write(cerebro(content, 'minify'))
                        out:close()

                        print('cerebro: compilation passed')
                    else
                        print('error: <output> expected' .. '\n')
                        help()
                    end
                end
            else
                print('error: file ' .. program .. ' not found')
                file:close()
                exit(1)
            end
        end,
    }

    local options = {
        ['-h'] = 'help', ['--help'] = 'help',
        ['-b'] = 'build', ['--build'] = 'build',
    }

    local option = args[1]
    local program = args[2]
    local output = args[3]

    if options[option] then
        exec[options[option]](program, output)
    else
        print('error: wrong option ' .. option .. '\n')
        help()
    end
end

--print(cerebro('{+}', 'debug'))

if arg and #arg > 0 then
	cli(arg)
else
	return cerebro
end
